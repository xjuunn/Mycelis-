generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// 用户
model User {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  displayName  String?
  passwordHash String
  avatarUrl    String?
  status       UserStatus @default(OFFLINE)
  role         UserRole   @default(USER)
  isActive     Boolean    @default(true)
  createAt     DateTime   @default(now())
  updateAt     DateTime   @updatedAt
  lastLoginAt  DateTime?

  // 好友请求
  sentFriendRequests     FriendRequest[] @relation("sentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("receivedFriendRequests")

  // 好友关系 - 作为发起方
  initiatedFriendships Friendship[] @relation("userFriendships")

  // 好友关系 - 作为接收方
  receivedFriendships Friendship[] @relation("friendUsers")

  // 好友标签
  FriendshipTag FriendshipTag[]

  sentMessage     Message[] @relation("sentMessages")
  receivedMessage Message[] @relation("receivedMessages")

  // 用户设备列表
  userDevice UserDevice[]
}

// 用户设备
model UserDevice {
  id             Int         @id @default(autoincrement())
  userId         Int
  user           User        @relation(fields: [userId], references: [id])
  socketId       String?     @unique
  name           String?     @default(uuid(4))
  os             DeviceType? @default(Unknow)
  isOnline       Boolean     @default(false)
  connectedAt    DateTime?
  disconnectedAt DateTime?
  createAt       DateTime    @default(now())

  @@unique([userId, name])
  @@index([userId])
  @@index([isOnline])
}

enum DeviceType {
  Browser
  Android
  IOS
  MacOS
  Linux
  Windows
  Unknow
}

// 用户状态
enum UserStatus {
  ONLINE
  OFFLINE
}

// 用户角色
enum UserRole {
  USER
  ADMIN
}

// 好友申请
model FriendRequest {
  id         Int                 @id @default(autoincrement())
  senderId   Int
  receiverId Int
  sender     User                @relation("sentFriendRequests", fields: [senderId], references: [id])
  receiver   User                @relation("receivedFriendRequests", fields: [receiverId], references: [id])
  status     FriendRequestStatus @default(PENDING)
  createAt   DateTime            @default(now())
}

// 好友申请状态
enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELETED
}

// 好友关系
model Friendship {
  id       Int            @id @default(autoincrement())
  userId   Int // 发起好友关系的用户ID
  friendId Int // 成为好友的用户ID
  user     User           @relation("userFriendships", fields: [userId], references: [id])
  friend   User           @relation("friendUsers", fields: [friendId], references: [id])
  note     String?
  createAt DateTime       @default(now())
  tagId    Int?           @map("friendshipTagId")
  tag      FriendshipTag? @relation(fields: [tagId], references: [id])

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

// 好友标签
model FriendshipTag {
  id         Int          @id @default(autoincrement())
  userId     Int
  user       User         @relation(fields: [userId], references: [id])
  tag        String
  sort       Int          @default(0)
  friendship Friendship[]

  @@unique([userId, tag])
}

// 消息表
model Message {
  id         Int           @id @default(autoincrement()) // ID
  senderId   Int // 发送者 ID
  sender     User          @relation("sentMessages", fields: [senderId], references: [id]) // 发送者
  receiverId Int // 接收者 ID
  receiver   User          @relation("receivedMessages", fields: [receiverId], references: [id]) // 接收者
  message    String        @default("hello") // 消息
  type       MessageType   @default(Text) // 消息类型
  origin     MessageOrigin @default(System) // 消息源
  status     MessageStatus @default(Sent) // 消息状态
  replyTo    Int? // 回复消息ID
  extra      Json? // 额外信息
  isPinned   Boolean       @default(false) // 是否置顶
  createAt   DateTime      @default(now()) // 创建时间
  updateAt   DateTime?     @updatedAt() // 更新时间
  readAt     DateTime? // 阅读时间

  @@index([senderId])
  @@index([receiverId])
  @@index([createAt])
}

// 消息状态
enum MessageStatus {
  Sent
  Delivered
  Read
  Modified
  Deleted
  Failed
}

// 消息源
enum MessageOrigin {
  User
  System
}

// 消息类型
enum MessageType {
  Text
  Image
  File
}
